from pymongo import MongoClient
from pymongo.collection import Collection
from src.utils.Logger import Logger
from src.utils.Dotenv import Dotenv


#! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –º—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#! –ò–ª–∏ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–µ–∂–µ


class MongoDB:
    _mongoDB_instance = None
    
    # def __new__(cls, *args, **kwargs):
    #     if cls._mongoDB_instance is None:
    #         cls._mongoDB_instance = super(MongoDB, cls).__new__(cls)
    #     return cls._mongoDB_instance

    def __new__(cls, *args, **kwargs):
        DATABASE_NAME = "school-bot"
        MONGO_URI = Dotenv().mongodb_string
        
        if cls._mongoDB_instance is None:
            cls._mongoDB_instance = super().__new__(cls)
            cls._mongoDB_instance.client = MongoClient(MONGO_URI, maxPoolSize=1)
            cls._mongoDB_instance.database = cls._mongoDB_instance.client[DATABASE_NAME] 
            
            Logger().info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DATABASE_NAME} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")
        
        return cls._mongoDB_instance


    
    def __init__(self, user_id: int = None) -> None:
        self.logger = Logger()
        
        
        # database
        # self.client: MongoClient = None
        # self.database: MongoClient = None
        # self.users_collection: MongoClient = None
        self.users_collection: Collection = self.database['users']
        
        # self.connect_to_mongo()

        #? (–≤–æ–∑–º–æ–∂–Ω–æ) —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ –Ω—É–∂–Ω–æ
        if user_id:
            self.user_id = user_id
        


    # def connect_to_mongo(self):
    #     DATABASE_NAME = "school-bot"
    #     MONGO_URI = Dotenv().mongodb_string
        
    #     self.client = MongoClient(MONGO_URI, maxPoolSize=1)
    #     self.database = self.client[DATABASE_NAME]
    #     self.logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DATABASE_NAME} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")
        
    #     # collections
    #     self.users_collection = self.database['users']
        # self.stats = self.database['stats']

        
    #! –ü—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ!
    #! –ö–æ–≥–¥–∞ —é–∑–µ—Ä –±—É–¥–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –±–æ—Ç—É –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    #! –£ –Ω–µ–≥–æ –±—É–¥–µ—Ç –∫–µ—à!
        

    def show_users(self):        
        self.logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è —é–∑–µ—Ä–æ–≤: {list(self.users_collection.find({}))}")
    
    
    def get_all_users(self):        
        self.show_users()
        return list(self.users_collection.find({}))
        
        
    def check_if_user_exists(self): 
        """ returns True if user is in the collection, False - if not """
        user = self.users_collection.find_one({ "user_id" : self.user_id })
        
        if user: 
            self.logger.info(f"–ß—É–≤–∞—á–æ–∫ (—á—É–≤–∏—Ö–∞) —Å id {self.user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ë–î")
            return True
        else: 
            self.logger.info(f"–ù–æ–≤–µ–Ω—å–∫–∏–π —é–∑–µ—Ä —Å id {self.user_id}! –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... üòã")
            return False
        
        
    def save_user(self, new_user) -> None:
        self.users_collection.insert_one(new_user)
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user["first_name"]} —Å id {new_user["user_id"]} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ú–æ–Ω–≥–æ! üéØ")
        
        
    def save_real_name(self, real_name: str):
        filter_by_id = {'user_id' : self.user_id}
        update_operation = { '$set': { 'real_name' : real_name } }
        
        self.users_collection.update_one(filter=filter_by_id, update=update_operation)
        
        
    def update_user(self, key, new_value):
        filter_by_id = {'user_id' : self.user_id}
        update_operation = { '$set': { key : new_value } }
        
        self.users_collection.update_one(filter=filter_by_id, update=update_operation)
        
        # –∫–µ—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        # Users().cache_users()
        
        
    def get_real_name(self, id) -> str:
        filter_by_id = {'user_id' : self.user_id}
        user = self.users_collection.find_one(filter=filter_by_id)
        
        return user["real_name"]
    
    
    def get_payment_data(self) -> int:
        filter_by_id = {'user_id' : self.user_id}
        user = self.users_collection.find_one(filter=filter_by_id)
        
        self.logger.info(f"payment amount: {user["payment_amount"]}")
        
        return user["payment_amount"]
        
        
    def clean_users(self):
        self.users_collection.delete_many({})
        self.logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω–∞! üßπ")
        
        # –∫–µ—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        # Users().cache_users()



""" 
    Actions to save in DB:
    - registration 
    - command used 
    - leave chat (idle for 10s-15s) 
    - filled in some data
    - press a button
    - choose a menu link / (or go to specific menu option)

    Structure: 
    [
        "–î–∞–º–∏—Ä": [
            {
                "time": "18:09:23 28-12-2023",
                "comment": "–∑–∞—à—ë–ª –≤ –±–æ—Ç–∞", 
                "action_type": "login", 
                "command": "/start", 
            },
            {
                "time": "18:10:01 28-12-2023",
                "comment": "–Ω–∞–∂–∞–ª /start", 
                "action_type": "login", 
                "command": "/start", 
            },
            {
                "time": "18:11:20 28-12-2023",
                "comment": "–≤—ã—à–µ–ª –∏–∑ –±–æ—Ç–∞", 
                "action_type": "logout", 
                "command": "", 
            },
        ]
    ]
"""
