from datetime import datetime, timedelta

from telebot.types import Message

from pymongo import MongoClient
from pymongo.collection import Collection

from src.utils.Logger import Logger
from src.utils.Dotenv import Dotenv
from src.languages.Ru import MONTHS_RU
from src.users.InitialUsers import InitialUsers


#! –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ä—É–∫–∏ –¥–æ–π–¥—É—Ç –¥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –º–∏–Ω–∏–º—É–º: user_id, real_name)


class MongoDB:
    _mongoDB_instance = None
    
    def __new__(cls, *args, **kwargs):
        DATABASE_NAME = "school-bot"
        MONGO_URI = Dotenv().mongodb_string
        
        if cls._mongoDB_instance is None:
            cls._mongoDB_instance = super().__new__(cls)
            cls._mongoDB_instance.client = MongoClient(MONGO_URI, maxPoolSize=1)
            cls._mongoDB_instance.database = cls._mongoDB_instance.client[DATABASE_NAME] 
            
            Logger().info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DATABASE_NAME} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")
        
        return cls._mongoDB_instance

    
    def __init__(self) -> None:
        self.logger = Logger()
        self.dotenv = Dotenv()
        
        self.users_collection: Collection = self.database['users']
        self.versions_collection: Collection = self.database['versions']

        
    def show_users(self):        
        self.logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è —é–∑–µ—Ä–æ–≤: {list(self.users_collection.find({}))}")
        
    
    
    def get_all_users(self):        
        return list(self.users_collection.find({}))
        

    
        
    def check_if_user_exists(self): 
        """ returns True if user is in the collection, False - if not """
        user = self.users_collection.find_one({ "user_id" : self.user_id })
        
        if user: 
            # self.logger.info(f"–ß—É–≤–∞—á–æ–∫ (—á—É–≤–∏—Ö–∞) —Å id {self.user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ë–î")
            return True
        else: 
            # self.logger.info(f"–ù–æ–≤–µ–Ω—å–∫–∏–π —é–∑–µ—Ä —Å id {self.user_id}! –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... üòã")
            return False
        
        
    def save_user(self, new_user: dict) -> None:
        self.users_collection.insert_one(new_user)
        # self.logger.info(f"before: { new_user }  ‚è≥ ")
        
        self.logger.info(f"–Æ–∑–µ—Ä —Å id { new_user["user_id"] } —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î ‚è≥ ")
        

        
    def update_user(self, user_id: int, key: str, new_value: str | int | bool):
        filter_by_id = { 'user_id' : user_id }
        update_operation = { '$set': { key : new_value } }
        
        self.users_collection.update_one(filter=filter_by_id, update=update_operation)
        
    #? Admin commands
        
    def clean_users(self):
        admin_ids = InitialUsers().admin_ids
        delete_filter = {"user_id": {"$nin": admin_ids}}
        
        self.users_collection.delete_many(filter=delete_filter)
        self.logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π MongoDB –æ—á–∏—â–µ–Ω–∞! üßπ")
        
        
    #? Versions
    def get_latest_versions_info(self, versions_limit: int = 3):
        self.versions_collection = self.database['versions']
        latest_versions = list(self.versions_collection.find({}).sort("id", -1).limit(versions_limit))
        
        latest_versions.reverse()
        print("üêç latest_versions from mongo: ", latest_versions)

        return latest_versions    
    
    
    def send_new_version_update(self, version_number: int, changelog: str):
        now = datetime.now()
        
        if Dotenv().environment == "production":
            now = now + timedelta(hours=3) 
        
        current_time = now.strftime(f"%d {MONTHS_RU[now.month]}, %H:%M")
        
        versions_count = self.versions_collection.count_documents({})
        
        new_update = {
            "id": versions_count + 1,
            "date": current_time,
            "version": version_number,
            "changelog": changelog,
        }
        
        self.versions_collection.insert_one(new_update)

        self.logger.info(f"‚åõ New version { version_number } published! ")
        
    
    #? Replication: —Å–µ–≥–æ–¥–Ω—è –ø–∏—à–µ–º —Ä–µ–ø–ª–∏–∫—É –ë–î —Å–æ –≤—Å–µ–π –µ—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
    #? 1) –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏
    #? 2) –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ä–µ–ø–ª–∏–∫–∏ –Ω–∞–∑–∞–¥ –≤ –ë–î
    
    
    #? –ó–∞—á–µ–º? –ß—Ç–æ–±—ã, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    
    

